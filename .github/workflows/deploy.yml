name: Deploy

on:
  push:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      promote:
        description: "Promote current commit to prod"
        required: false
        default: "true"

env:
  NODE_VERSION: 20
  DOCKER_PLATFORM: linux/amd64
  # Cloud Run
  CR_PORT: 5000
  CR_CONCURRENCY: 80
  CR_TIMEOUT: 900s
  CR_ENV_NODE: production
  CR_ENV_API_BASE: /api/v1
  # Secrets we require in Secret Manager (names = env var names used at runtime)
  REQUIRED_SECRETS: "UPLOADS_ALLOWED_MIME MONGODB_URI GCS_BUCKET_UPLOADS CLERK_ISSUER CLERK_AUDIENCE"

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    defaults:
      run:
        working-directory: server
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          cache-dependency-path: server/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint, typecheck, tests
        run: |
          yarn lint
          yarn typecheck
          yarn test --ci

      - name: Build Docker image
        run: |
          docker build \
            --platform ${{ env.DOCKER_PLATFORM }} \
            -t ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }} \
            .

      - name: Auth to GCP (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure GCP project & enable APIs
        run: |
          gcloud config set project "${{ secrets.GCP_PROJECT }}"
          gcloud services enable \
            secretmanager.googleapis.com \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            iamcredentials.googleapis.com || true

      - name: Configure Docker auth for Artifact Registry
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}"
          REG_HOST="${REPO%%/*}"
          if [[ ! "$REG_HOST" =~ ^[a-z0-9-]+-docker\.pkg\.dev$ ]]; then
            echo "::error::GCP_ARTIFACT_REGISTRY_REPO must look like '<region>-docker.pkg.dev/<project>/<repo>'"
            echo "Got: $REPO"
            exit 1
          fi
          gcloud auth configure-docker "$REG_HOST" --quiet

      - name: Push image
        run: docker push ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}

      - name: Ensure secrets exist, add versions if missing, enable latest, grant accessor
        shell: bash
        run: |
          set -euo pipefail
          SA="${{ secrets.GCP_SA_EMAIL }}"
          PROJECT="${{ secrets.GCP_PROJECT }}"

          # Map Secret Manager names -> values sourced from GitHub Secrets.
          # (We only CREATE or ADD VERSION when missing. We never overwrite existing values.)
          declare -A SECRET_VALUES=(
            [UPLOADS_ALLOWED_MIME]="${{ secrets.UPLOADS_ALLOWED_MIME }}"
            [MONGODB_URI]="${{ secrets.MONGODB_URI }}"
            [GCS_BUCKET_UPLOADS]="${{ secrets.GCS_BUCKET_UPLOADS }}"
            [CLERK_ISSUER]="${{ secrets.CLERK_ISSUER }}"
            [CLERK_AUDIENCE]="${{ secrets.CLERK_AUDIENCE }}"
          )

          echo "Configuring required secrets for runtime service account: $SA"

          for NAME in ${{ env.REQUIRED_SECRETS }}; do
            echo "::group::Secret $NAME"

            # Create secret if it doesn't exist
            if ! gcloud secrets describe "$NAME" --project="$PROJECT" >/dev/null 2>&1; then
              VALUE="${SECRET_VALUES[$NAME]}"
              if [[ -z "${VALUE}" ]]; then
                echo "::error::GitHub Secret value for $NAME is empty or not provided."
                echo "Create the Secret Manager secret manually or add a GitHub secret named $NAME."
                exit 1
              fi
              printf %s "$VALUE" | gcloud secrets create "$NAME" \
                --project="$PROJECT" \
                --replication-policy="automatic" \
                --data-file=-
              echo "  - Created secret $NAME"
            fi

            # If secret has no versions, add one from GitHub Secret value
            VERSIONS_COUNT=$(gcloud secrets versions list "$NAME" --project="$PROJECT" --format='value(name)' | wc -l | tr -d ' ')
            if [[ "$VERSIONS_COUNT" -eq 0 ]]; then
              VALUE="${SECRET_VALUES[$NAME]}"
              if [[ -z "${VALUE}" ]]; then
                echo "::error::Secret $NAME exists but has no versions and no GitHub value available."
                exit 1
              fi
              printf %s "$VALUE" | gcloud secrets versions add "$NAME" --project="$PROJECT" --data-file=-
              echo "  - Added initial version for $NAME"
            fi

            # Enable latest if disabled
            LATEST_NUM="$(gcloud secrets versions list "$NAME" --project="$PROJECT" --format='value(name)' --limit=1 | sed 's/.*versions\///')"
            STATE="$(gcloud secrets versions describe "$LATEST_NUM" --secret="$NAME" --project="$PROJECT" --format='value(state)')"
            if [[ "$STATE" == "DISABLED" ]]; then
              gcloud secrets versions enable "$LATEST_NUM" --secret="$NAME" --project="$PROJECT"
              echo "  - Enabled $NAME:$LATEST_NUM"
            fi

            # Grant Secret Accessor to runtime SA (idempotent)
            gcloud secrets add-iam-policy-binding "$NAME" \
              --project="$PROJECT" \
              --member="serviceAccount:$SA" \
              --role="roles/secretmanager.secretAccessor" \
              --quiet || true
            echo "  - Granted roles/secretmanager.secretAccessor to $SA"

            echo "::endgroup::"
          done

      - name: Grant bucket Object Admin + SA Token Creator to runtime SA
        shell: bash
        run: |
          set -euo pipefail
          SA="${{ secrets.GCP_SA_EMAIL }}"
          PROJECT="${{ secrets.GCP_PROJECT }}"

          # Read bucket name from Secret Manager (do NOT echo it)
          BUCKET="$(gcloud secrets versions access latest --secret=GCS_BUCKET_UPLOADS --project="$PROJECT")"
          if [[ -z "$BUCKET" ]]; then
            echo "::error::Secret GCS_BUCKET_UPLOADS has no value."
            exit 1
          fi

          # Allow object operations (for post-upload validations / listings)
          gcloud storage buckets add-iam-policy-binding "gs://${BUCKET}" \
            --member="serviceAccount:${SA}" \
            --role="roles/storage.objectAdmin" \
            --project="$PROJECT" || true

          # Allow keyless V4 signing (IAM SignBlob) on Cloud Run
          gcloud iam service-accounts add-iam-policy-binding "$SA" \
            --member="serviceAccount:${SA}" \
            --role="roles/iam.serviceAccountTokenCreator" \
            --project="$PROJECT" || true

      - name: Deploy to Cloud Run (staging)
        shell: bash
        run: |
          set -euo pipefail

          # Build --set-secrets flags dynamically from REQUIRED_SECRETS
          SECRET_FLAGS=""
          for NAME in ${{ env.REQUIRED_SECRETS }}; do
            SECRET_FLAGS="$SECRET_FLAGS --set-secrets=$NAME=$NAME:latest"
          done

          gcloud run deploy "${{ secrets.SERVICE_NAME }}-stg" \
            --image="${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}" \
            --region="${{ secrets.GCP_REGION }}" \
            --project="${{ secrets.GCP_PROJECT }}" \
            --platform=managed \
            --allow-unauthenticated \
            --port=${{ env.CR_PORT }} \
            --set-env-vars=^:^NODE_ENV=${{ env.CR_ENV_NODE }}:API_BASE=${{ env.CR_ENV_API_BASE }}:WS_ORIGINS=${{ secrets.WS_ORIGINS }} \
            $SECRET_FLAGS \
            --min-instances=0 \
            --max-instances=10 \
            --concurrency=${{ env.CR_CONCURRENCY }} \
            --timeout=${{ env.CR_TIMEOUT }} \
            --service-account="${{ secrets.GCP_SA_EMAIL }}" \
            --quiet

      - name: Wait for staging to be Ready (and dump logs on failure)
        shell: bash
        run: |
          set -euo pipefail
          SERVICE="${{ secrets.SERVICE_NAME }}-stg"
          REGION="${{ secrets.GCP_REGION }}"
          PROJECT="${{ secrets.GCP_PROJECT }}"

          echo "Waiting for $SERVICE to become Ready…"
          for i in {1..30}; do
            STATUS="$(gcloud run services describe "$SERVICE" --region="$REGION" --project="$PROJECT" --format='value(status.conditions[0].status)' 2>/dev/null || echo "")"
            if [[ "$STATUS" == "True" ]]; then
              echo "Ready."
              exit 0
            fi
            echo "  Attempt $i/30: status=$STATUS"
            sleep 10
          done

          echo "::error::Service did not become Ready. Dumping details…"
          gcloud run services describe "$SERVICE" --region="$REGION" --project="$PROJECT" --format=yaml || true

          REV="$(gcloud run services describe "$SERVICE" --region="$REGION" --project="$PROJECT" --format='value(status.latestCreatedRevisionName)' || true)"
          if [[ -n "$REV" ]]; then
            echo "Recent error logs for $REV:"
            gcloud run logs read "$REV" --region="$REGION" --project="$PROJECT" --limit=200 --severity=ERROR --timestamps || true
          fi
          exit 1

      - name: Health check (staging)
        run: curl -fsSL "${{ secrets.STAGING_URL }}/api/v1/readyz" | cat

  promote-prod:
    needs: deploy-staging
    if: ${{ github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: server
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Auth to GCP (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure project
        run: gcloud config set project "${{ secrets.GCP_PROJECT }}"

      - name: Ensure secrets (same guarantees as staging)
        shell: bash
        run: |
          set -euo pipefail
          SA="${{ secrets.GCP_SA_EMAIL }}"
          PROJECT="${{ secrets.GCP_PROJECT }}"
          declare -A SECRET_VALUES=(
            [UPLOADS_ALLOWED_MIME]="${{ secrets.UPLOADS_ALLOWED_MIME }}"
            [MONGODB_URI]="${{ secrets.MONGODB_URI }}"
            [GCS_BUCKET_UPLOADS]="${{ secrets.GCS_BUCKET_UPLOADS }}"
            [CLERK_ISSUER]="${{ secrets.CLERK_ISSUER }}"
            [CLERK_AUDIENCE]="${{ secrets.CLERK_AUDIENCE }}"
          )
          for NAME in ${{ env.REQUIRED_SECRETS }}; do
            if ! gcloud secrets describe "$NAME" --project="$PROJECT" >/dev/null 2>&1; then
              VALUE="${SECRET_VALUES[$NAME]}"
              if [[ -z "${VALUE}" ]]; then
                echo "::error::Missing GitHub Secret for $NAME."
                exit 1
              fi
              printf %s "$VALUE" | gcloud secrets create "$NAME" --project="$PROJECT" --replication-policy="automatic" --data-file=-
            fi
            if [[ "$(gcloud secrets versions list "$NAME" --project="$PROJECT" --format='value(name)' | wc -l | tr -d ' ')" -eq 0 ]]; then
              VALUE="${SECRET_VALUES[$NAME]}"
              printf %s "$VALUE" | gcloud secrets versions add "$NAME" --project="$PROJECT" --data-file=-
            fi
            LATEST_NUM="$(gcloud secrets versions list "$NAME" --project="$PROJECT" --format='value(name)' --limit=1 | sed 's/.*versions\///')"
            STATE="$(gcloud secrets versions describe "$LATEST_NUM" --secret="$NAME" --project="$PROJECT" --format='value(state)')"
            if [[ "$STATE" == "DISABLED" ]]; then
              gcloud secrets versions enable "$LATEST_NUM" --secret="$NAME" --project="$PROJECT"
            fi
            gcloud secrets add-iam-policy-binding "$NAME" \
              --project="$PROJECT" \
              --member="serviceAccount:$SA" \
              --role="roles/secretmanager.secretAccessor" \
              --quiet || true
          done

      - name: Grant bucket Object Admin + SA Token Creator (prod)
        shell: bash
        run: |
          set -euo pipefail
          SA="${{ secrets.GCP_SA_EMAIL }}"
          PROJECT="${{ secrets.GCP_PROJECT }}"
          BUCKET="$(gcloud secrets versions access latest --secret=GCS_BUCKET_UPLOADS --project="$PROJECT")"
          if [[ -z "$BUCKET" ]]; then
            echo "::error::Secret GCS_BUCKET_UPLOADS has no value."
            exit 1
          fi
          gcloud storage buckets add-iam-policy-binding "gs://${BUCKET}" \
            --member="serviceAccount:${SA}" \
            --role="roles/storage.objectAdmin" \
            --project="$PROJECT" || true
          gcloud iam service-accounts add-iam-policy-binding "$SA" \
            --member="serviceAccount:${SA}" \
            --role="roles/iam.serviceAccountTokenCreator" \
            --project="$PROJECT" || true

      - name: Deploy to Cloud Run (production)
        shell: bash
        run: |
          set -euo pipefail
          SECRET_FLAGS=""
          for NAME in ${{ env.REQUIRED_SECRETS }}; do
            SECRET_FLAGS="$SECRET_FLAGS --set-secrets=$NAME=$NAME:latest"
          done
          gcloud run deploy "${{ secrets.SERVICE_NAME }}-prd" \
            --image="${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}" \
            --region="${{ secrets.GCP_REGION }}" \
            --project="${{ secrets.GCP_PROJECT }}" \
            --platform=managed \
            --allow-unauthenticated \
            --port=${{ env.CR_PORT }} \
            --set-env-vars=^:^NODE_ENV=${{ env.CR_ENV_NODE }}:API_BASE=${{ env.CR_ENV_API_BASE }}:WS_ORIGINS=${{ secrets.WS_ORIGINS }} \
            $SECRET_FLAGS \
            --min-instances=1 \
            --max-instances=20 \
            --concurrency=${{ env.CR_CONCURRENCY }} \
            --timeout=${{ env.CR_TIMEOUT }} \
            --service-account="${{ secrets.GCP_SA_EMAIL }}" \
            --quiet

      - name: Wait for production Ready (and dump logs on failure)
        shell: bash
        run: |
          set -euo pipefail
          SERVICE="${{ secrets.SERVICE_NAME }}-prd"
          REGION="${{ secrets.GCP_REGION }}"
          PROJECT="${{ secrets.GCP_PROJECT }}"
          for i in {1..30}; do
            STATUS="$(gcloud run services describe "$SERVICE" --region="$REGION" --project="$PROJECT" --format='value(status.conditions[0].status)' 2>/dev/null || echo "")"
            if [[ "$STATUS" == "True" ]]; then
              echo "Ready."
              exit 0
            fi
            echo "  Attempt $i/30: status=$STATUS"
            sleep 10
          done
          echo "::error::Service did not become Ready. Dumping details…"
          gcloud run services describe "$SERVICE" --region="$REGION" --project="$PROJECT" --format=yaml || true
          REV="$(gcloud run services describe "$SERVICE" --region="$REGION" --project="$PROJECT" --format='value(status.latestCreatedRevisionName)' || true)"
          if [[ -n "$REV" ]]; then
            gcloud run logs read "$REV" --region="$REGION" --project="$PROJECT" --limit=200 --severity=ERROR --timestamps || true
          fi
          exit 1

      - name: Health check (production)
        run: curl -fsSL "${{ secrets.PROD_URL }}/api/v1/readyz" | cat
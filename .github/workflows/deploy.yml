name: Deploy

on:
  push:
    branches: ['master']
  workflow_dispatch:
    inputs:
      promote:
        description: 'Promote current commit to prod'
        required: false
        default: 'true'

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run lint
      - run: npm run typecheck
      - run: npm test -- --ci
      - name: Build Docker image
        run: docker build -t ${{ env.GCP_ARTIFACT_REGISTRY_REPO }}/$SERVICE_NAME:${{ github.sha }} .
        env:
          GCP_ARTIFACT_REGISTRY_REPO: ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
      - name: Configure Docker auth
        run: gcloud auth configure-docker ${{ env.REGISTRY_HOST }}
        env:
          REGISTRY_HOST: ${{ secrets.GCP_REGISTRY_HOST }}
      - name: Push image
        run: docker push ${{ env.IMAGE }}
        env:
          IMAGE: ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
      - name: Deploy to Cloud Run (staging)
        run: |
          gcloud run deploy $SERVICE_NAME-stg \
            --image=$IMAGE \
            --region=$GCP_REGION \
            --platform=managed \
            --allow-unauthenticated \
            --port=5000 \
            --set-env-vars=NODE_ENV=production \
            --set-env-vars=API_BASE=/api/v1 \
            --set-env-vars=WS_ORIGINS=$WS_ORIGINS \
            --set-env-vars=GCS_BUCKET_UPLOADS=$GCS_BUCKET_UPLOADS \
            --set-env-vars=CLERK_ISSUER=$CLERK_ISSUER \
            --set-env-vars=CLERK_AUDIENCE=$CLERK_AUDIENCE \
            --set-secrets=MONGODB_URI=MONGODB_URI:latest \
            --min-instances=0 \
            --max-instances=10 \
            --concurrency=80 \
            --timeout=900s
        env:
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          IMAGE: ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          WS_ORIGINS: ${{ secrets.WS_ORIGINS }}
          GCS_BUCKET_UPLOADS: ${{ secrets.GCS_BUCKET_UPLOADS }}
          CLERK_ISSUER: ${{ secrets.CLERK_ISSUER }}
          CLERK_AUDIENCE: ${{ secrets.CLERK_AUDIENCE }}
      - name: Readiness check (staging)
        run: curl -f $URL/api/v1/readyz | cat
        env:
          URL: ${{ secrets.STAGING_URL }}

  promote-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/master' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
      - name: Configure Docker auth
        run: gcloud auth configure-docker ${{ env.REGISTRY_HOST }}
        env:
          REGISTRY_HOST: ${{ secrets.GCP_REGISTRY_HOST }}
      - name: Deploy to Cloud Run (prod)
        run: |
          gcloud run deploy $SERVICE_NAME-prd \
            --image=$IMAGE \
            --region=$GCP_REGION \
            --platform=managed \
            --allow-unauthenticated \
            --port=5000 \
            --set-env-vars=NODE_ENV=production \
            --set-env-vars=API_BASE=/api/v1 \
            --set-env-vars=WS_ORIGINS=$WS_ORIGINS \
            --set-env-vars=GCS_BUCKET_UPLOADS=$GCS_BUCKET_UPLOADS \
            --set-env-vars=CLERK_ISSUER=$CLERK_ISSUER \
            --set-env-vars=CLERK_AUDIENCE=$CLERK_AUDIENCE \
            --set-secrets=MONGODB_URI=MONGODB_URI:latest \
            --min-instances=1 \
            --max-instances=20 \
            --concurrency=80 \
            --timeout=900s
        env:
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          IMAGE: ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          WS_ORIGINS: ${{ secrets.WS_ORIGINS }}
          GCS_BUCKET_UPLOADS: ${{ secrets.GCS_BUCKET_UPLOADS }}
          CLERK_ISSUER: ${{ secrets.CLERK_ISSUER }}
          CLERK_AUDIENCE: ${{ secrets.CLERK_AUDIENCE }}
      - name: Readiness check (prod)
        run: curl -f $URL/api/v1/readyz | cat
        env:
          URL: ${{ secrets.PROD_URL }}

name: Deploy

on:
  push:
    branches: ["master"]
  workflow_dispatch:
    inputs:
      promote:
        description: "Promote current commit to prod"
        required: false
        default: "true"
env:
  NODE_VERSION: 20
  DOCKER_PLATFORM: linux/amd64
  CR_PORT: 5000
  CR_CONCURRENCY: 80
  CR_TIMEOUT: 900s
  CR_ENV_NODE: production
  CR_ENV_API_BASE: /api/v1

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    defaults:
      run:
        working-directory: server
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          cache-dependency-path: server/yarn.lock

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run quality checks
        run: |
          yarn lint
          yarn typecheck
          yarn test --ci

      - name: Build Docker image
        run: |
          docker build \
            --platform ${{ env.DOCKER_PLATFORM }} \
            -t ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }} \
            .
      - name: Auth to GCP (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          audience: "https://github.com/akibrahimug/portfolio"

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Set active project
        run: gcloud config set project "$GCP_PROJECT"
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      - name: Enable required APIs (idempotent)
        run: |
          gcloud services enable \
          secretmanager.googleapis.com \
          iam.googleapis.com || true

      - name: Configure Docker auth
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}"
          # Expect: <region>-docker.pkg.dev/<project>/<repo>
          REG_HOST="${REPO%%/*}"
          if [[ ! "$REG_HOST" =~ ^[a-z0-9-]+-docker\.pkg\.dev$ ]]; then
            echo "GCP_ARTIFACT_REGISTRY_REPO must look like '<region>-docker.pkg.dev/<project>/<repo>'"
            echo "Got: $REPO"
            exit 1
          fi
          echo "Using REG_HOST=$REG_HOST"
          gcloud auth configure-docker "$REG_HOST" --quiet

      - name: Push image
        run: docker push ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run (staging)
        run: |
          gcloud run deploy "$SERVICE_NAME-stg" \
            --image="$IMAGE" \
            --region="$GCP_REGION" \
            --platform=managed \
            --allow-unauthenticated \
            --port=5000 \
            --set-env-vars=NODE_ENV=production \
            --set-env-vars=API_BASE=/api/v1 \
            --set-env-vars=CLERK_ISSUER="$CLERK_ISSUER" \
            --set-env-vars=CLERK_AUDIENCE="$CLERK_AUDIENCE" \
            --update-secrets=MONGODB_URI=MONGODB_URI:latest \
            --update-secrets=GCS_BUCKET_UPLOADS=GCS_BUCKET_UPLOADS:latest \
            --update-secrets=UPLOADS_ALLOWED_MIME=UPLOADS_ALLOWED_MIME:latest \
            --min-instances=0 \
            --max-instances=10 \
            --concurrency=80 \
            --timeout=900s \
            --service-account="${{ secrets.GCP_SA_EMAIL }}"
        env:
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          IMAGE: ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCS_BUCKET_UPLOADS: ${{ secrets.GCS_BUCKET_UPLOADS }}
          CLERK_ISSUER: ${{ secrets.CLERK_ISSUER }}
          CLERK_AUDIENCE: ${{ secrets.CLERK_AUDIENCE }}

      - name: Health check (staging)
        shell: bash
        run: |
          set -euo pipefail
          
          URL="${{ secrets.STAGING_URL }}"
          MAX_RETRIES=5
          RETRY=0
          
          echo "Performing health check on $URL/api/v1/readyz"
          
          while [ $RETRY -lt $MAX_RETRIES ]; do
            if curl -fsSL --max-time 30 "$URL/api/v1/readyz"; then
              echo "âœ“ Health check passed"
              break
            fi
          
            RETRY=$((RETRY + 1))
            echo "Health check failed (attempt $RETRY/$MAX_RETRIES), retrying in 5 seconds..."
            sleep 5
          done
          
          if [ $RETRY -eq $MAX_RETRIES ]; then
            echo "::error::Health check failed after $MAX_RETRIES attempts"
            exit 1
          fi

  promote-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    if: ${{ github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/master' }}
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: server/yarn.lock

      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          audience: "https://github.com/akibrahimug/portfolio"

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Set active project
        run: gcloud config set project "$GCP_PROJECT"
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      - name: Ensure Secret Accessor on MONGODB_URI (idempotent)
        run: |
          set -euo pipefail
          gcloud secrets add-iam-policy-binding MONGODB_URI \
            --project="$GCP_PROJECT" \
            --member="serviceAccount:${{ secrets.GCP_SA_EMAIL }}" \
            --role="roles/secretmanager.secretAccessor" || true
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      - name: Configure Docker auth
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}"
          REG_HOST="${REPO%%/*}"
          if [[ ! "$REG_HOST" =~ ^[a-z0-9-]+-docker\.pkg\.dev$ ]]; then
            echo "GCP_ARTIFACT_REGISTRY_REPO must look like '<region>-docker.pkg.dev/<project>/<repo>'"
            echo "Got: $REPO"
            exit 1
          fi
          echo "Using REG_HOST=$REG_HOST"
          gcloud auth configure-docker "$REG_HOST" --quiet

      - name: Deploy to Cloud Run (prod)
        run: |
          gcloud run deploy "$SERVICE_NAME-prd" \
            --image="$IMAGE" \
            --region="$GCP_REGION" \
            --platform=managed \
            --allow-unauthenticated \
            --port=5000 \
            --set-env-vars=NODE_ENV=production \
            --set-env-vars=API_BASE=/api/v1 \
            --set-env-vars=WS_ORIGINS="$WS_ORIGINS" \
            --set-env-vars=CLERK_ISSUER="$CLERK_ISSUER" \
            --set-env-vars=CLERK_AUDIENCE="$CLERK_AUDIENCE" \
            --update-secrets=MONGODB_URI=MONGODB_URI:latest \
            --update-secrets=GCS_BUCKET_UPLOADS=GCS_BUCKET_UPLOADS:latest \
            --update-secrets=UPLOADS_ALLOWED_MIME=UPLOADS_ALLOWED_MIME:latest \
            --min-instances=1 \
            --max-instances=20 \
            --concurrency=80 \
            --timeout=900s \
            --service-account="${{ secrets.GCP_SA_EMAIL }}"
        env:
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          IMAGE: ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          WS_ORIGINS: ${{ secrets.WS_ORIGINS }}
          CLERK_ISSUER: ${{ secrets.CLERK_ISSUER }}
          CLERK_AUDIENCE: ${{ secrets.CLERK_AUDIENCE }}

      - name: Production deployment summary
        shell: bash
        run: |
          echo "ðŸš€ Production deployment completed successfully!"
          echo "Service: ${{ secrets.SERVICE_NAME }}-prd"
          echo "Region: ${{ secrets.GCP_REGION }}"
          echo "URL: ${{ secrets.PROD_URL }}"
          echo "Image: ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}"